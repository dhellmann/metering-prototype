#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Copyright Â© 2012 New Dream Network, LLC (DreamHost)
#
# Author: Doug Hellmann <doug.hellmann@dreamhost.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""Command line tool for recording notification messages and replaying
them later.
"""

import argparse
import logging
import cPickle as pickle
import sys

import eventlet
from kombu import BrokerConnection, Exchange, Queue
from kombu.mixins import ConsumerMixin
from kombu.pools import producers


LOG = logging.getLogger(__name__)

class NotificationClient(ConsumerMixin):

    def __init__(self, name, connection, callback):
        self.connection = connection
        self.callback = callback
        # FIXME(dhellmann): Only works with Nova right now
        LOG.debug('creating queue %s', name)
        self.queue = Queue(name=name,
                           exchange=Exchange(name='nova',
                                             type='topic',
                                             durable=False,
                                             auto_delete=False,
                                             ),
                           routing_key='notifications.info',
                           durable=False,
                           auto_delete=True,
                           exclusive=True,
                           )

    def get_consumers(self, Consumer, channel):
        return [Consumer(queues=[self.queue],
                         callbacks=[self.process_event],
                         )
                ]

    def process_event(self, body, message):
        eventlet.spawn_n(self.callback, body, message)


def main():
    parser = argparse.ArgumentParser(
        description='record or play back notification events',
        )
    parser.add_argument('mode',
                        choices=('record', 'replay'),
                        help='operating mode',
                        )
    parser.add_argument('data_file',
                        help='the data file to read or write',
                        )
    parser.add_argument('--amqp',
                        # FIXME(dhellmann): This should come from the
                        # nova configuration eventually
                        default='amqp://guest:secrete@localhost//',
                        help='location of AMQP service',
                        )
    args = parser.parse_args()

    console = logging.StreamHandler(sys.stderr)
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(message)s')
    console.setFormatter(formatter)
    root_logger = logging.getLogger('')
    root_logger.addHandler(console)
    root_logger.setLevel(logging.DEBUG)

    eventlet.monkey_patch()
    
    if args.mode == 'record':
        
        with open(args.data_file, 'wb') as output:

            def process_event(body, message):
                print ('%s: %s' %
                       (body.get('timestamp'),
                        body.get('event_type', 'unknown event'),
                        ))
                pickle.dump(body, output)
                message.ack()

            with BrokerConnection(args.amqp) as conn:
                handler = NotificationClient(
                    args.data_file, conn, process_event,
                    )
                try:
                    handler.run()
                except KeyboardInterrupt:
                    pass

    elif args.mode == 'replay':

        with open(args.data_file, 'rb') as input:

            with BrokerConnection(args.amqp) as connection:
                while True:
                    try:
                        body = pickle.load(input)
                    except EOFError:
                        break
                    print('%s: %s' %
                          (body.get('timestamp'),
                           body.get('event_type', 'unknown event'),
                           ))
                    with producers[connection].acquire(block=True) as producer:
                        producer.publish(body,
                                         exchange='nova',
                                         routing_key='notifications.info',
                                         )

if __name__ == '__main__':
    main()
